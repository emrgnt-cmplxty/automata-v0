{"task_id": "HumanEval/0", "completion": "\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers)-1):\n        if abs(numbers[i]-numbers[i+1]) < threshold:\n            return True\n    return False\n", "raw_completion": "```python\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers)-1):\n        if abs(numbers[i]-numbers[i+1]) < threshold:\n            return True\n    return False\n```"}
{"task_id": "HumanEval/1", "completion": "\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    res, opened, paren_groups = [], [], []\n    for i, c in enumerate(paren_string):\n        if c == '(':\n            opened.append(i)\n        elif c == ')':\n            if opened:\n                start = opened.pop()\n                if not opened:\n                    paren_groups.append(paren_string[start: i + 1])\n\n    return paren_groups\n", "raw_completion": "```python\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    res, opened, paren_groups = [], [], []\n    for i, c in enumerate(paren_string):\n        if c == '(':\n            opened.append(i)\n        elif c == ')':\n            if opened:\n                start = opened.pop()\n                if not opened:\n                    paren_groups.append(paren_string[start: i + 1])\n\n    return paren_groups\n```"}
{"task_id": "HumanEval/10", "completion": "\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    else:\n        for i in range(len(string), -1, -1):\n            if is_palindrome(string[:i]):\n                return string + string[i - 1::-1]\n\nassert make_palindrome('') == ''\nassert make_palindrome('cat') == 'catac'\nassert make_palindrome('cata') == 'catac'\n", "raw_completion": "```python\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    else:\n        for i in range(len(string), -1, -1):\n            if is_palindrome(string[:i]):\n                return string + string[i - 1::-1]\n\nassert make_palindrome('') == ''\nassert make_palindrome('cat') == 'catac'\nassert make_palindrome('cata') == 'catac'\n```"}
{"task_id": "HumanEval/100", "completion": "\ndef make_a_pile(n):\n    return [n + 2 * i for i in range(n)]\n", "raw_completion": "```python\ndef make_a_pile(n):\n    return [n + 2 * i for i in range(n)]\n```"}
{"task_id": "HumanEval/101", "completion": "\ndef words_string(s):\n    return s.replace(',', ' ').split()\n", "raw_completion": "```python\ndef words_string(s):\n    return s.replace(',', ' ').split()\n```"}
{"task_id": "HumanEval/102", "completion": "\ndef choose_num(x, y):\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1\n", "raw_completion": "```python\ndef choose_num(x, y):\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1\n```"}
{"task_id": "HumanEval/103", "completion": "\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round(sum(range(n, m+1)) / (m - n + 1))\n        return bin(avg)\n", "raw_completion": "```python\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round(sum(range(n, m+1)) / (m - n + 1))\n        return bin(avg)\n```"}
{"task_id": "HumanEval/104", "completion": "\ndef unique_digits(x):\n    return sorted([n for n in x if all(int(d) % 2 != 0 for d in str(n))])\n", "raw_completion": "```python\ndef unique_digits(x):\n    return sorted([n for n in x if all(int(d) % 2 != 0 for d in str(n))])\n```"}
{"task_id": "HumanEval/105", "completion": "\ndef by_length(arr):\n    digit_names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    arr = sorted([i for i in arr if 1 <= i <= 9], reverse=True)\n    return [digit_names[i] for i in arr]\n", "raw_completion": "```python\ndef by_length(arr):\n    digit_names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    arr = sorted([i for i in arr if 1 <= i <= 9], reverse=True)\n    return [digit_names[i] for i in arr]\n```"}
{"task_id": "HumanEval/106", "completion": "\ndef f(n):\n    from math import factorial \n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(i+1)))\n    return result\n", "raw_completion": "```python\ndef f(n):\n    from math import factorial \n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(i+1)))\n    return result\n```"}
{"task_id": "HumanEval/107", "completion": "\ndef even_odd_palindrome(n):\n    even, odd = 0, 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n", "raw_completion": "```python\ndef even_odd_palindrome(n):\n    even, odd = 0, 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n```"}
{"task_id": "HumanEval/108", "completion": "\ndef count_nums(arr):\n    counts = 0\n    for num in arr:\n        if num < 0:\n            num = int(str(num)[1:])\n            if (int(str(num)[0]) * -1 + sum(int(i) for i in str(num)[1:])) > 0:\n                counts += 1\n        elif sum(int(i) for i in str(num)) > 0:\n            counts += 1\n    return counts\n", "raw_completion": "```python\ndef count_nums(arr):\n    counts = 0\n    for num in arr:\n        if num < 0:\n            num = int(str(num)[1:])\n            if (int(str(num)[0]) * -1 + sum(int(i) for i in str(num)[1:])) > 0:\n                counts += 1\n        elif sum(int(i) for i in str(num)) > 0:\n            counts += 1\n    return counts\n```"}
{"task_id": "HumanEval/109", "completion": "\ndef move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False\n", "raw_completion": "```python\ndef move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False\n```"}
{"task_id": "HumanEval/11", "completion": "\nfrom typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n", "raw_completion": "```python\nfrom typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n```"}
{"task_id": "HumanEval/110", "completion": "\n\ndef exchange(lst1, lst2):\n    cnt1 = sum(1 for i in lst1 if i % 2 != 0)\n    cnt2 = sum(1 for i in lst2 if i % 2 == 0)\n    return \"YES\" if cnt1 <= cnt2 else \"NO\"\n", "raw_completion": "```python\n\ndef exchange(lst1, lst2):\n    cnt1 = sum(1 for i in lst1 if i % 2 != 0)\n    cnt2 = sum(1 for i in lst2 if i % 2 == 0)\n    return \"YES\" if cnt1 <= cnt2 else \"NO\"\n```"}
{"task_id": "HumanEval/111", "completion": "\ndef histogram(test):\n    letters = test.split()\n    letter_counts = {letter: letters.count(letter) for letter in letters}\n    max_count = max(letter_counts.values()) if letter_counts else 0\n    return {letter: count for letter, count in letter_counts.items() if count == max_count}\n", "raw_completion": "```python\ndef histogram(test):\n    letters = test.split()\n    letter_counts = {letter: letters.count(letter) for letter in letters}\n    max_count = max(letter_counts.values()) if letter_counts else 0\n    return {letter: count for letter, count in letter_counts.items() if count == max_count}\n```"}
{"task_id": "HumanEval/112", "completion": "\ndef reverse_delete(s, c):\n    result = ''.join([i for i in s if i not in c])\n    return (result, result == result[::-1])\n", "raw_completion": "```python\ndef reverse_delete(s, c):\n    result = ''.join([i for i in s if i not in c])\n    return (result, result == result[::-1])\n```"}
{"task_id": "HumanEval/113", "completion": "\ndef odd_count(lst):\n    output = []\n    for i in lst:\n        count = sum(1 for digit in i if int(digit) % 2 == 1)\n        string = \"the number of odd elements \" + str(count) + \"n the str\" + str(count) +\"ng \" + str(count) + \" of the \" + str(count) + \"nput.\"\n        output.append(string)\n    return output\n", "raw_completion": "```python\ndef odd_count(lst):\n    output = []\n    for i in lst:\n        count = sum(1 for digit in i if int(digit) % 2 == 1)\n        string = \"the number of odd elements \" + str(count) + \"n the str\" + str(count) +\"ng \" + str(count) + \" of the \" + str(count) + \"nput.\"\n        output.append(string)\n    return output\n```"}
{"task_id": "HumanEval/114", "completion": "\nimport math\n\ndef minSubArraySum(nums):\n    minSum = math.inf\n    for i in range(len(nums)):\n        sum = 0\n        for j in range(i, len(nums)):\n            sum += nums[j]\n            if sum < minSum:\n                minSum = sum\n    return minSum\n", "raw_completion": "```python\nimport math\n\ndef minSubArraySum(nums):\n    minSum = math.inf\n    for i in range(len(nums)):\n        sum = 0\n        for j in range(i, len(nums)):\n            sum += nums[j]\n            if sum < minSum:\n                minSum = sum\n    return minSum\n```"}
{"task_id": "HumanEval/115", "completion": "\n\ndef max_fill(grid, capacity):\n    total_capacity = sum(sum(row) for row in grid)\n    return (total_capacity + capacity - 1) // capacity\n", "raw_completion": "```python\n\ndef max_fill(grid, capacity):\n    total_capacity = sum(sum(row) for row in grid)\n    return (total_capacity + capacity - 1) // capacity\n```"}
{"task_id": "HumanEval/116", "completion": "\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n", "raw_completion": "```python\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n```"}
{"task_id": "HumanEval/117", "completion": "\ndef select_words(s, n):\n    vowels=\"aeiouAEIOU\"\n    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = len([char for char in word if char not in vowels])\n        if consonant_count == n:\n            result.append(word)\n    return result\n", "raw_completion": "```python\ndef select_words(s, n):\n    vowels=\"aeiouAEIOU\"\n    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = len([char for char in word if char not in vowels])\n        if consonant_count == n:\n            result.append(word)\n    return result\n```"}
{"task_id": "HumanEval/118", "completion": "\ndef get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    word = word[::-1]\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n", "raw_completion": "```python\ndef get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    word = word[::-1]\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n```"}
{"task_id": "HumanEval/119", "completion": "\ndef match_parens(lst):\n    string_1, string_2 = lst\n    string_1_count = string_1.count('(') - string_1.count(')')\n    string_2_count = string_2.count('(') - string_2.count(')')\n    return 'Yes' if string_1_count == string_2_count else 'No'\n", "raw_completion": "```python\ndef match_parens(lst):\n    string_1, string_2 = lst\n    string_1_count = string_1.count('(') - string_1.count(')')\n    string_2_count = string_2.count('(') - string_2.count(')')\n    return 'Yes' if string_1_count == string_2_count else 'No'\n```"}
{"task_id": "HumanEval/12", "completion": "\nfrom typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    else:\n        return max(strings, key=len)\n", "raw_completion": "```python\nfrom typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    else:\n        return max(strings, key=len)\n```"}
{"task_id": "HumanEval/120", "completion": "\n\ndef maximum(arr, k):\n    arr.sort()\n    return arr[-k:]\n\n", "raw_completion": "```python\n\ndef maximum(arr, k):\n    arr.sort()\n    return arr[-k:]\n\n```"}
{"task_id": "HumanEval/121", "completion": "\ndef solution(lst):\n    return sum([lst[i] for i in range(len(lst)) if i%2 == 0 and lst[i]%2 != 0])\n", "raw_completion": "```python\ndef solution(lst):\n    return sum([lst[i] for i in range(len(lst)) if i%2 == 0 and lst[i]%2 != 0])\n```"}
{"task_id": "HumanEval/122", "completion": "\ndef add_elements(arr, k):\n    return sum(x for x in arr[:k] if x < 100)\n", "raw_completion": "```python\ndef add_elements(arr, k):\n    return sum(x for x in arr[:k] if x < 100)\n```"}
{"task_id": "HumanEval/123", "completion": "\ndef get_odd_collatz(n):\n    res = []\n    while n != 1:\n        if n % 2 != 0:\n            res.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    res.append(1)\n    return sorted(res)\n", "raw_completion": "```python\ndef get_odd_collatz(n):\n    res = []\n    while n != 1:\n        if n % 2 != 0:\n            res.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    res.append(1)\n    return sorted(res)\n```"}
{"task_id": "HumanEval/124", "completion": "\ndef valid_date(date):\n    months_31 = [1,3,5,7,8,10,12]\n    months_30 = [4,6,9,11]\n    if len(date)!=10 or date[2]!='-' or date[5]!='-':\n        return False\n    else:\n        m,d,y = int(date[:2]),int(date[3:5]),int(date[6:])\n        if m<1 or m>12:\n            return False\n        elif m in months_31:\n            if d<1 or d>31:\n                return False\n        elif m in months_30:\n            if d<1 or d>30:\n                return False\n        elif m==2:\n            if d<1 or d>29:\n                return False\n        return True\n", "raw_completion": "```python\ndef valid_date(date):\n    months_31 = [1,3,5,7,8,10,12]\n    months_30 = [4,6,9,11]\n    if len(date)!=10 or date[2]!='-' or date[5]!='-':\n        return False\n    else:\n        m,d,y = int(date[:2]),int(date[3:5]),int(date[6:])\n        if m<1 or m>12:\n            return False\n        elif m in months_31:\n            if d<1 or d>31:\n                return False\n        elif m in months_30:\n            if d<1 or d>30:\n                return False\n        elif m==2:\n            if d<1 or d>29:\n                return False\n        return True\n```"}
{"task_id": "HumanEval/125", "completion": "\ndef split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt.lower() if 'a' <= c <= 'z' and (ord(c) - ord('a')) % 2)\n", "raw_completion": "```python\ndef split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt.lower() if 'a' <= c <= 'z' and (ord(c) - ord('a')) % 2)\n```"}
{"task_id": "HumanEval/126", "completion": "\ndef is_sorted(lst):\n    if len(lst) != len(set(lst)) or lst != sorted(lst):\n        return False\n    return True\n", "raw_completion": "```python\ndef is_sorted(lst):\n    if len(lst) != len(set(lst)) or lst != sorted(lst):\n        return False\n    return True\n```"}
{"task_id": "HumanEval/127", "completion": "\n\ndef intersection(interval1, interval2):\n    start, end = max(interval1[0], interval2[0]), min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n\n    if length < 2:\n        return \"NO\"\n\n    for i in range(2, length):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"\n\n", "raw_completion": "```python\n\ndef intersection(interval1, interval2):\n    start, end = max(interval1[0], interval2[0]), min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n\n    if length < 2:\n        return \"NO\"\n\n    for i in range(2, length):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"\n\n```"}
{"task_id": "HumanEval/128", "completion": "\ndef prod_signs(arr):\n    if not arr:\n        return None\n\n    magnitude_sum = sum(abs(x) for x in arr)\n    sign_product = 1 if not 0 in arr else 0\n    if sign_product != 0:\n        for x in arr:\n            if x < 0:\n                sign_product *= -1\n\n    return magnitude_sum * sign_product\n", "raw_completion": "```python\ndef prod_signs(arr):\n    if not arr:\n        return None\n\n    magnitude_sum = sum(abs(x) for x in arr)\n    sign_product = 1 if not 0 in arr else 0\n    if sign_product != 0:\n        for x in arr:\n            if x < 0:\n                sign_product *= -1\n\n    return magnitude_sum * sign_product\n```"}
{"task_id": "HumanEval/129", "completion": "\ndef minPath(grid, k):\n    N = len(grid)\n    neighbors = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    paths = [(grid[i][j], i, j, [(i,j)]) for i in range(N) for j in range(N)]\n    for _ in range(k-1):\n        newpaths = []\n        for val, i, j, path in paths:\n            for dx, dy in neighbors:\n                nx, ny = i + dx, j + dy\n                if 0 <= nx < N and 0 <= ny < N and (nx,ny) not in path:\n                    newpaths.append((val + grid[nx][ny], nx, ny, path + [(nx,ny)]))\n        paths = sorted(newpaths)[:N*N]\n    return [grid[i][j] for _, i, j, _ in sorted(paths)[:1]][0]\n", "raw_completion": "```python\ndef minPath(grid, k):\n    N = len(grid)\n    neighbors = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    paths = [(grid[i][j], i, j, [(i,j)]) for i in range(N) for j in range(N)]\n    for _ in range(k-1):\n        newpaths = []\n        for val, i, j, path in paths:\n            for dx, dy in neighbors:\n                nx, ny = i + dx, j + dy\n                if 0 <= nx < N and 0 <= ny < N and (nx,ny) not in path:\n                    newpaths.append((val + grid[nx][ny], nx, ny, path + [(nx,ny)]))\n        paths = sorted(newpaths)[:N*N]\n    return [grid[i][j] for _, i, j, _ in sorted(paths)[:1]][0]\n```"}
{"task_id": "HumanEval/13", "completion": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)\n", "raw_completion": "```python\ndef greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)\n```"}
{"task_id": "HumanEval/130", "completion": "\ndef tri(n):\n    if n == 1:\n        return [1, 3]\n    elif n == 0:\n        return [1]\n    else:\n        tri_sequence = [1, 3]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                tri_sequence.append(1 + i / 2)\n            else:\n                tri_sequence.append(tri_sequence[i - 1] + tri_sequence[i - 2] + (1 + (i + 1) / 2))\n        return tri_sequence\n", "raw_completion": "```python\ndef tri(n):\n    if n == 1:\n        return [1, 3]\n    elif n == 0:\n        return [1]\n    else:\n        tri_sequence = [1, 3]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                tri_sequence.append(1 + i / 2)\n            else:\n                tri_sequence.append(tri_sequence[i - 1] + tri_sequence[i - 2] + (1 + (i + 1) / 2))\n        return tri_sequence\n```"}
{"task_id": "HumanEval/131", "completion": "\ndef digits(n):\n    product = 1\n    odd_flag = False\n    for c in str(n):\n        digit = int(c)\n        if digit % 2 != 0:\n            odd_flag = True\n            product *= digit\n    return 0 if not odd_flag else product\n", "raw_completion": "```python\ndef digits(n):\n    product = 1\n    odd_flag = False\n    for c in str(n):\n        digit = int(c)\n        if digit % 2 != 0:\n            odd_flag = True\n            product *= digit\n    return 0 if not odd_flag else product\n```"}
{"task_id": "HumanEval/132", "completion": "\ndef is_nested(string):\n    counter = 0\n    for x in string:\n        if x == \"[\":\n            counter += 1\n        elif x == \"]\":\n            counter -= 1\n    return counter == 0 and \"[]\" not in string\n", "raw_completion": "```python\ndef is_nested(string):\n    counter = 0\n    for x in string:\n        if x == \"[\":\n            counter += 1\n        elif x == \"]\":\n            counter -= 1\n    return counter == 0 and \"[]\" not in string\n```"}
{"task_id": "HumanEval/133", "completion": "\ndef sum_squares(lst):\n    return sum([int(x)**2 for x in map(lambda x: x if x > 0 else x*-1, map(lambda x: x if x%1 == 0 else x+1, lst))])\n", "raw_completion": "```python\ndef sum_squares(lst):\n    return sum([int(x)**2 for x in map(lambda x: x if x > 0 else x*-1, map(lambda x: x if x%1 == 0 else x+1, lst))])\n```"}
{"task_id": "HumanEval/134", "completion": "\ndef check_if_last_char_is_a_letter(txt):\n    # remove trailing spaces\n    txt = txt.rstrip()\n    # if the text is empty or the last char is a space, return False\n    if txt == '' or txt[-1] == ' ':\n        return False\n    # if the second last char is a space, this means the last char is not part of a word\n    if len(txt) > 1 and txt[-2] == ' ':\n        # check if the last char is a letter\n        return txt[-1].isalpha()\n    else:\n        return False\n", "raw_completion": "```python\ndef check_if_last_char_is_a_letter(txt):\n    # remove trailing spaces\n    txt = txt.rstrip()\n    # if the text is empty or the last char is a space, return False\n    if txt == '' or txt[-1] == ' ':\n        return False\n    # if the second last char is a space, this means the last char is not part of a word\n    if len(txt) > 1 and txt[-2] == ' ':\n        # check if the last char is a letter\n        return txt[-1].isalpha()\n    else:\n        return False\n```"}
{"task_id": "HumanEval/135", "completion": "\ndef can_arrange(arr):\n    for index in range(1, len(arr)):\n        if arr[index] < arr[index - 1]:\n            return index\n    return -1\n", "raw_completion": "```python\ndef can_arrange(arr):\n    for index in range(1, len(arr)):\n        if arr[index] < arr[index - 1]:\n            return index\n    return -1\n```"}
{"task_id": "HumanEval/136", "completion": "\ndef largest_smallest_integers(lst):\n    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n    a = max(negatives) if negatives else None\n    b = min(positives) if positives else None\n    return a, b\n", "raw_completion": "```python\ndef largest_smallest_integers(lst):\n    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n    a = max(negatives) if negatives else None\n    b = min(positives) if positives else None\n    return a, b\n```"}
{"task_id": "HumanEval/137", "completion": "\n\ndef compare_one(a, b):\n    a1 = float(str(a).replace(\",\",\".\"))\n    b1 = float(str(b).replace(\",\",\".\"))\n    if a1 > b1:\n        return a\n    elif a1 < b1:\n        return b\n    else:\n        return None\n", "raw_completion": "```python\n\ndef compare_one(a, b):\n    a1 = float(str(a).replace(\",\",\".\"))\n    b1 = float(str(b).replace(\",\",\".\"))\n    if a1 > b1:\n        return a\n    elif a1 < b1:\n        return b\n    else:\n        return None\n```"}
{"task_id": "HumanEval/138", "completion": "\ndef is_equal_to_sum_even(n):\n    if n < 8:\n        return False\n    elif (n - 8) % 2 == 0:\n        return True\n    else:\n        return False\n", "raw_completion": "```python\ndef is_equal_to_sum_even(n):\n    if n < 8:\n        return False\n    elif (n - 8) % 2 == 0:\n        return True\n    else:\n        return False\n```"}
{"task_id": "HumanEval/139", "completion": "\ndef special_factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1) * special_factorial(n-2)\n", "raw_completion": "```python\ndef special_factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1) * special_factorial(n-2)\n```"}
{"task_id": "HumanEval/14", "completion": "\nfrom typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string)+1)]\n", "raw_completion": "```python\nfrom typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string)+1)]\n```"}
{"task_id": "HumanEval/140", "completion": "\ndef fix_spaces(text):\n    while '  ' in text:\n        text = text.replace('  ', ' ')\n    text = text.replace(' ', '_').replace('__', '-')\n    return text\n", "raw_completion": "```python\ndef fix_spaces(text):\n    while '  ' in text:\n        text = text.replace('  ', ' ')\n    text = text.replace(' ', '_').replace('__', '-')\n    return text\n```"}
{"task_id": "HumanEval/141", "completion": "\n\ndef file_name_check(file_name):\n    file_parts = file_name.split(\".\")\n    if len(file_parts) != 2:\n        return 'No'\n    name, ext = file_parts\n    if not name or not name[0].isalpha() or sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n", "raw_completion": "```python\n\ndef file_name_check(file_name):\n    file_parts = file_name.split(\".\")\n    if len(file_parts) != 2:\n        return 'No'\n    name, ext = file_parts\n    if not name or not name[0].isalpha() or sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n```"}
{"task_id": "HumanEval/142", "completion": "\ndef sum_squares(lst):\n    return sum(val**3 if i % 4 == 0 and i % 3 != 0 else val**2 if i % 3 == 0 else val for i, val in enumerate(lst))\n", "raw_completion": "```python\ndef sum_squares(lst):\n    return sum(val**3 if i % 4 == 0 and i % 3 != 0 else val**2 if i % 3 == 0 else val for i, val in enumerate(lst))\n```"}
{"task_id": "HumanEval/143", "completion": "\ndef words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n", "raw_completion": "```python\ndef words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n```"}
{"task_id": "HumanEval/144", "completion": "\ndef simplify(x, n):\n    x_numerator, x_denominator = map(int, x.split('/'))\n    n_numerator, n_denominator = map(int, n.split('/'))\n    \n    simplified = (x_numerator * n_numerator) / (x_denominator * n_denominator)\n    \n    return simplified.is_integer()\n", "raw_completion": "```python\ndef simplify(x, n):\n    x_numerator, x_denominator = map(int, x.split('/'))\n    n_numerator, n_denominator = map(int, n.split('/'))\n    \n    simplified = (x_numerator * n_numerator) / (x_denominator * n_denominator)\n    \n    return simplified.is_integer()\n```"}
{"task_id": "HumanEval/145", "completion": "\ndef order_by_points(nums):\n    return sorted(nums, key=lambda n: sum(int(d) for d in str(abs(n))))\n", "raw_completion": "```python\ndef order_by_points(nums):\n    return sorted(nums, key=lambda n: sum(int(d) for d in str(abs(n))))\n```"}
{"task_id": "HumanEval/146", "completion": "\ndef specialFilter(nums):\n    return len([n for n in nums if n > 10 and int(str(n)[0])%2 != 0 and int(str(n)[-1])%2 != 0])\n", "raw_completion": "```python\ndef specialFilter(nums):\n    return len([n for n in nums if n > 10 and int(str(n)[0])%2 != 0 and int(str(n)[-1])%2 != 0])\n```"}
{"task_id": "HumanEval/147", "completion": "\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    triple_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    triple_count += 1\n    return triple_count\n", "raw_completion": "```python\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    triple_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    triple_count += 1\n    return triple_count\n```"}
{"task_id": "HumanEval/148", "completion": "\ndef bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        start, end = sorted([planets.index(planet1), planets.index(planet2)])\n        return tuple(planets[start+1:end])\n", "raw_completion": "```python\ndef bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        start, end = sorted([planets.index(planet1), planets.index(planet2)])\n        return tuple(planets[start+1:end])\n```"}
{"task_id": "HumanEval/149", "completion": "\ndef sorted_list_sum(lst):\n    lst = [x for x in lst if len(x) % 2 == 0]\n    return sorted(sorted(lst), key=len)\n", "raw_completion": "```python\ndef sorted_list_sum(lst):\n    lst = [x for x in lst if len(x) % 2 == 0]\n    return sorted(sorted(lst), key=len)\n```"}
{"task_id": "HumanEval/15", "completion": "\ndef string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))\n", "raw_completion": "```python\ndef string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))\n```"}
{"task_id": "HumanEval/150", "completion": "\ndef x_or_y(n, x, y):\n    if n > 1 and all(n%i!=0 for i in range(2, int(n**0.5)+1)):\n        return x\n    else:\n        return y\n", "raw_completion": "```python\ndef x_or_y(n, x, y):\n    if n > 1 and all(n%i!=0 for i in range(2, int(n**0.5)+1)):\n        return x\n    else:\n        return y\n```"}
{"task_id": "HumanEval/151", "completion": "\n\ndef double_the_difference(lst):\n    return sum(i ** 2 for i in lst if i > 0 and i % 2 != 0)\n", "raw_completion": "```python\n\ndef double_the_difference(lst):\n    return sum(i ** 2 for i in lst if i > 0 and i % 2 != 0)\n```"}
{"task_id": "HumanEval/152", "completion": "\ndef compare(game,guess):\n    return [abs(a-b) if a != b else 0 for a, b in zip(game, guess)]\n", "raw_completion": "```python\ndef compare(game,guess):\n    return [abs(a-b) if a != b else 0 for a, b in zip(game, guess)]\n```"}
{"task_id": "HumanEval/153", "completion": "\ndef Strongest_Extension(class_name, extensions):\n    return class_name + \".\" + max(extensions, key = lambda extension : sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower()))\n", "raw_completion": "```python\ndef Strongest_Extension(class_name, extensions):\n    return class_name + \".\" + max(extensions, key = lambda extension : sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower()))\n```"}
{"task_id": "HumanEval/154", "completion": "\ndef cycpattern_check(a , b):\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False\n", "raw_completion": "```python\ndef cycpattern_check(a , b):\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False\n```"}
{"task_id": "HumanEval/155", "completion": "\ndef even_odd_count(num):\n    num = abs(num)\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)\n", "raw_completion": "```python\ndef even_odd_count(num):\n    num = abs(num)\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)\n```"}
{"task_id": "HumanEval/156", "completion": "\n\ndef int_to_mini_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num.lower()\n\n", "raw_completion": "```python\n\ndef int_to_mini_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num.lower()\n\n```"}
{"task_id": "HumanEval/157", "completion": "\ndef right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n", "raw_completion": "```python\ndef right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n```"}
{"task_id": "HumanEval/158", "completion": "\ndef find_max(words):\n    return min(sorted(words, key=str.lower), key=lambda s: -len(set(s)))\n", "raw_completion": "```python\ndef find_max(words):\n    return min(sorted(words, key=str.lower), key=lambda s: -len(set(s)))\n```"}
{"task_id": "HumanEval/159", "completion": "\ndef eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(0, remaining - need)\n    return [eaten, left] \n", "raw_completion": "```python\ndef eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(0, remaining - need)\n    return [eaten, left] \n```"}
{"task_id": "HumanEval/16", "completion": "\ndef count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n", "raw_completion": "```python\ndef count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n```"}
{"task_id": "HumanEval/160", "completion": "\ndef do_algebra(operator, operand):\n    if len(operator) != len(operand) - 1:\n        raise ValueError('Invalid input lengths')\n\n    result = operand[0]\n    for index in range(len(operator)):\n        if operator[index] == '+': \n            result += operand[index + 1]\n        elif operator[index] == '-': \n            result -= operand[index + 1]\n        elif operator[index] == '*': \n            result *= operand[index + 1]\n        elif operator[index] == '//': \n            result //= operand[index + 1]\n        elif operator[index] == '**': \n            result **= operand[index + 1]\n    return result\n", "raw_completion": "```python\ndef do_algebra(operator, operand):\n    if len(operator) != len(operand) - 1:\n        raise ValueError('Invalid input lengths')\n\n    result = operand[0]\n    for index in range(len(operator)):\n        if operator[index] == '+': \n            result += operand[index + 1]\n        elif operator[index] == '-': \n            result -= operand[index + 1]\n        elif operator[index] == '*': \n            result *= operand[index + 1]\n        elif operator[index] == '//': \n            result //= operand[index + 1]\n        elif operator[index] == '**': \n            result **= operand[index + 1]\n    return result\n```"}
{"task_id": "HumanEval/161", "completion": "\n\ndef solve(s):\n    if any(c.isalpha() for c in s):\n        return \"\".join(c.upper() if c.islower() else c.lower() for c in s)\n    else:\n        return s[::-1]\n", "raw_completion": "```python\n\ndef solve(s):\n    if any(c.isalpha() for c in s):\n        return \"\".join(c.upper() if c.islower() else c.lower() for c in s)\n    else:\n        return s[::-1]\n```"}
{"task_id": "HumanEval/162", "completion": "\nimport hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n", "raw_completion": "```python\nimport hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n```"}
{"task_id": "HumanEval/163", "completion": "\ndef generate_integers(a, b):\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0] \n", "raw_completion": "```python\ndef generate_integers(a, b):\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0] \n```"}
{"task_id": "HumanEval/17", "completion": "\nfrom typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    music_list = music_string.split()\n    note_dict = {'o': 4, 'o|': 2, '.|': 1}\n    beats_list = [note_dict[note] for note in music_list]\n\n    return beats_list\n", "raw_completion": "```python\nfrom typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    music_list = music_string.split()\n    note_dict = {'o': 4, 'o|': 2, '.|': 1}\n    beats_list = [note_dict[note] for note in music_list]\n\n    return beats_list\n```"}
{"task_id": "HumanEval/18", "completion": "\ndef how_many_times(string: str, substring: str) -> int:\n    return sum(1 for i in range(len(string)) if string.startswith(substring, i))\n", "raw_completion": "```python\ndef how_many_times(string: str, substring: str) -> int:\n    return sum(1 for i in range(len(string)) if string.startswith(substring, i))\n```"}
{"task_id": "HumanEval/19", "completion": "\nfrom typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    dict_nums = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    nums_list = numbers.split(' ')\n    sorted_nums = sorted(nums_list, key=lambda num: dict_nums[num])\n    return ' '.join(sorted_nums)\n", "raw_completion": "```python\nfrom typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    dict_nums = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    nums_list = numbers.split(' ')\n    sorted_nums = sorted(nums_list, key=lambda num: dict_nums[num])\n    return ' '.join(sorted_nums)\n```"}
{"task_id": "HumanEval/2", "completion": "\ndef truncate_number(number: float) -> float:\n    return number - int(number)\n", "raw_completion": "```python\ndef truncate_number(number: float) -> float:\n    return number - int(number)\n```"}
{"task_id": "HumanEval/20", "completion": "\nfrom typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = min((numbers[i+1], numbers[i]) for i in range(len(numbers) - 1))\n    return min(closest_pair), max(closest_pair)\n", "raw_completion": "```python\nfrom typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = min((numbers[i+1], numbers[i]) for i in range(len(numbers) - 1))\n    return min(closest_pair), max(closest_pair)\n```"}
{"task_id": "HumanEval/21", "completion": "\nfrom typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(i - min_val) / range_val for i in numbers]\n", "raw_completion": "```python\nfrom typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(i - min_val) / range_val for i in numbers]\n```"}
{"task_id": "HumanEval/22", "completion": "\nfrom typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if type(val) == int]\n", "raw_completion": "```python\nfrom typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if type(val) == int]\n```"}
{"task_id": "HumanEval/23", "completion": "\ndef strlen(string: str) -> int:\n    return len(string)\n", "raw_completion": "```python\ndef strlen(string: str) -> int:\n    return len(string)\n```"}
{"task_id": "HumanEval/24", "completion": "\ndef largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n", "raw_completion": "```python\ndef largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n```"}
{"task_id": "HumanEval/25", "completion": "\nfrom typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n", "raw_completion": "```python\nfrom typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n```"}
{"task_id": "HumanEval/26", "completion": "\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [numbers[i] for i in range(len(numbers)) if numbers[i] not in numbers[:i]]\n", "raw_completion": "```python\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [numbers[i] for i in range(len(numbers)) if numbers[i] not in numbers[:i]]\n```"}
{"task_id": "HumanEval/27", "completion": "\ndef flip_case(string: str) -> str:\n    return string.swapcase()\n", "raw_completion": "```python\ndef flip_case(string: str) -> str:\n    return string.swapcase()\n```"}
{"task_id": "HumanEval/28", "completion": "\nfrom typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n", "raw_completion": "```python\nfrom typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n```"}
{"task_id": "HumanEval/29", "completion": "\nfrom typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n", "raw_completion": "```python\nfrom typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n```"}
{"task_id": "HumanEval/3", "completion": "\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n", "raw_completion": "```python\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n```"}
{"task_id": "HumanEval/30", "completion": "\ndef get_positive(l: list):\n    return [x for x in l if x > 0]\n", "raw_completion": "```python\ndef get_positive(l: list):\n    return [x for x in l if x > 0]\n```"}
{"task_id": "HumanEval/31", "completion": "\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n", "raw_completion": "```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```"}
{"task_id": "HumanEval/32", "completion": "\nimport math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    start = -100 \n    while poly(xs, start) != 0: \n        start += 0.01\n        if start > 100:\n            break \n    return start\n", "raw_completion": "```python\nimport math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    start = -100 \n    while poly(xs, start) != 0: \n        start += 0.01\n        if start > 100:\n            break \n    return start\n```"}
{"task_id": "HumanEval/33", "completion": "\ndef sort_third(l: list):\n    at_indexes_div_by_three = sorted([l[i] for i in range(len(l)) if i % 3 == 0])\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = at_indexes_div_by_three.pop(0)\n    return l\n", "raw_completion": "```python\ndef sort_third(l: list):\n    at_indexes_div_by_three = sorted([l[i] for i in range(len(l)) if i % 3 == 0])\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = at_indexes_div_by_three.pop(0)\n    return l\n```"}
{"task_id": "HumanEval/34", "completion": "\ndef unique(l: list):\n    return sorted(set(l))\n", "raw_completion": "```python\ndef unique(l: list):\n    return sorted(set(l))\n```"}
{"task_id": "HumanEval/35", "completion": "\ndef max_element(l: list):\n    return max(l)\n", "raw_completion": "```python\ndef max_element(l: list):\n    return max(l)\n```"}
{"task_id": "HumanEval/36", "completion": "\ndef fizz_buzz(n: int):\n    return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)\n", "raw_completion": "```python\ndef fizz_buzz(n: int):\n    return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)\n```"}
{"task_id": "HumanEval/37", "completion": "\ndef sort_even(l: list):\n    evens = sorted(l[i] for i in range(0, len(l), 2))\n    for i in range(0, len(l), 2):\n        l[i] = evens.pop(0)\n    return l\n", "raw_completion": "```python\ndef sort_even(l: list):\n    evens = sorted(l[i] for i in range(0, len(l), 2))\n    for i in range(0, len(l), 2):\n        l[i] = evens.pop(0)\n    return l\n```"}
{"task_id": "HumanEval/38", "completion": "\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "raw_completion": "```python\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)```"}
{"task_id": "HumanEval/39", "completion": "\ndef prime_fib(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    counter = 0\n    for i in fib():\n        if is_prime(i):\n            counter += 1\n            if counter == n:\n                return i\n", "raw_completion": "```python\ndef prime_fib(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    counter = 0\n    for i in fib():\n        if is_prime(i):\n            counter += 1\n            if counter == n:\n                return i\n```"}
{"task_id": "HumanEval/4", "completion": "\nfrom typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n", "raw_completion": "```python\nfrom typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n```"}
{"task_id": "HumanEval/40", "completion": "\ndef triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False\n", "raw_completion": "```python\ndef triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False\n```"}
{"task_id": "HumanEval/41", "completion": "\ndef car_race_collision(n: int):\n    return n**2\n", "raw_completion": "```python\ndef car_race_collision(n: int):\n    return n**2\n```"}
{"task_id": "HumanEval/42", "completion": "\ndef incr_list(l: list):\n    return [i+1 for i in l]\n", "raw_completion": "```python\ndef incr_list(l: list):\n    return [i+1 for i in l]\n```"}
{"task_id": "HumanEval/43", "completion": "\ndef pairs_sum_to_zero(l):\n    s = set(l)\n    for i in s:\n        if -i in s and i != 0:\n            return True\n    return False\n", "raw_completion": "```python\ndef pairs_sum_to_zero(l):\n    s = set(l)\n    for i in s:\n        if -i in s and i != 0:\n            return True\n    return False\n```"}
{"task_id": "HumanEval/44", "completion": "\ndef change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    digits.reverse()\n    return \"\".join(digits)\n", "raw_completion": "```python\ndef change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    digits.reverse()\n    return \"\".join(digits)\n```"}
{"task_id": "HumanEval/45", "completion": "\ndef triangle_area(a, h):\n    return 0.5 * a * h\n", "raw_completion": "```python\ndef triangle_area(a, h):\n    return 0.5 * a * h\n```"}
{"task_id": "HumanEval/46", "completion": "\ndef fib4(n: int):\n    seq = [0, 0, 2, 0]\n    if n < 4: \n        return seq[n]\n    else:\n        for i in range(4, n+1):\n            seq.append(sum(seq[i-4:i]))\n        return seq[n]\n", "raw_completion": "```python\ndef fib4(n: int):\n    seq = [0, 0, 2, 0]\n    if n < 4: \n        return seq[n]\n    else:\n        for i in range(4, n+1):\n            seq.append(sum(seq[i-4:i]))\n        return seq[n]\n```"}
{"task_id": "HumanEval/47", "completion": "\ndef median(l: list):\n    l.sort()\n    length = len(l)\n    if length % 2 == 0:\n        return (l[length // 2 - 1] + l[length // 2]) / 2\n    else:\n        return l[length // 2]\n", "raw_completion": "```python\ndef median(l: list):\n    l.sort()\n    length = len(l)\n    if length % 2 == 0:\n        return (l[length // 2 - 1] + l[length // 2]) / 2\n    else:\n        return l[length // 2]\n```"}
{"task_id": "HumanEval/48", "completion": "\ndef is_palindrome(text: str):\n    return text == text[::-1]\n", "raw_completion": "```python\ndef is_palindrome(text: str):\n    return text == text[::-1]\n```"}
{"task_id": "HumanEval/49", "completion": "\ndef modp(n: int, p: int):\n    return pow(2, n, p)\n", "raw_completion": "```python\ndef modp(n: int, p: int):\n    return pow(2, n, p)\n```"}
{"task_id": "HumanEval/5", "completion": "\nfrom typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    return sum([[x, delimeter] for x in numbers], [])[:-1]\n", "raw_completion": "```python\nfrom typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    return sum([[x, delimeter] for x in numbers], [])[:-1]\n```"}
{"task_id": "HumanEval/50", "completion": "\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n", "raw_completion": "```python\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n```"}
{"task_id": "HumanEval/51", "completion": "\ndef remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([i for i in text if i not in vowels])\n", "raw_completion": "```python\ndef remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([i for i in text if i not in vowels])\n```"}
{"task_id": "HumanEval/52", "completion": "\ndef below_threshold(l: list, t: int):\n    return all(i < t for i in l)\n", "raw_completion": "```python\ndef below_threshold(l: list, t: int):\n    return all(i < t for i in l)\n```"}
{"task_id": "HumanEval/53", "completion": "\ndef add(x: int, y: int) -> int:\n    return x + y\n", "raw_completion": "```python\ndef add(x: int, y: int) -> int:\n    return x + y\n```"}
{"task_id": "HumanEval/54", "completion": "\ndef same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)\n", "raw_completion": "```python\ndef same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)\n```"}
{"task_id": "HumanEval/55", "completion": "\ndef fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n", "raw_completion": "```python\ndef fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n```"}
{"task_id": "HumanEval/56", "completion": "\ndef correct_bracketing(brackets: str):\n    count = 0\n    for char in brackets:\n        if char == '<':\n            count += 1\n        elif char == '>':\n            if count == 0:\n                return False\n            count -= 1\n    return count == 0\n", "raw_completion": "```python\ndef correct_bracketing(brackets: str):\n    count = 0\n    for char in brackets:\n        if char == '<':\n            count += 1\n        elif char == '>':\n            if count == 0:\n                return False\n            count -= 1\n    return count == 0\n```"}
{"task_id": "HumanEval/57", "completion": "\ndef monotonic(l: list):\n    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n", "raw_completion": "```python\ndef monotonic(l: list):\n    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n```"}
{"task_id": "HumanEval/58", "completion": "\ndef common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))\n", "raw_completion": "```python\ndef common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))\n```"}
{"task_id": "HumanEval/59", "completion": "\ndef largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n", "raw_completion": "```python\ndef largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n```"}
{"task_id": "HumanEval/6", "completion": "\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        current_depth, max_depth = 0, 0\n        for char in group:\n            if char == \"(\":\n                current_depth += 1\n            elif char == \")\":\n                current_depth -= 1\n            max_depth = max(max_depth, current_depth)\n        result.append(max_depth)\n    return result\n", "raw_completion": "```python\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        current_depth, max_depth = 0, 0\n        for char in group:\n            if char == \"(\":\n                current_depth += 1\n            elif char == \")\":\n                current_depth -= 1\n            max_depth = max(max_depth, current_depth)\n        result.append(max_depth)\n    return result\n```"}
{"task_id": "HumanEval/60", "completion": "\ndef sum_to_n(n: int):\n    return sum(range(1, n+1))\n", "raw_completion": "```python\ndef sum_to_n(n: int):\n    return sum(range(1, n+1))\n```"}
{"task_id": "HumanEval/61", "completion": "\ndef correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count += 1\n        elif bracket == ')':\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0\n", "raw_completion": "```python\ndef correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count += 1\n        elif bracket == ')':\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0\n```"}
{"task_id": "HumanEval/62", "completion": "\ndef derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]\n", "raw_completion": "```python\ndef derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]\n```"}
{"task_id": "HumanEval/63", "completion": "\ndef fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(n-2):\n            a, b, c = b, c, a + b + c\n        return c\n", "raw_completion": "```python\ndef fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(n-2):\n            a, b, c = b, c, a + b + c\n        return c\n```"}
{"task_id": "HumanEval/64", "completion": "\ndef vowels_count(s):\n    vowels = \"aeiou\"\n    s = s.lower()\n    count = sum([1 for char in s if char in vowels])\n    if s.endswith('y'):\n        count += 1\n    return count\n", "raw_completion": "```python\ndef vowels_count(s):\n    vowels = \"aeiou\"\n    s = s.lower()\n    count = sum([1 for char in s if char in vowels])\n    if s.endswith('y'):\n        count += 1\n    return count\n```"}
{"task_id": "HumanEval/65", "completion": "\ndef circular_shift(x, shift):\n    string_x = str(x)\n    length = len(string_x)\n    if shift > length:\n        return string_x[::-1]\n    else:\n        shift = shift % length\n        return string_x[-shift:] + string_x[:-shift]\n", "raw_completion": "```python\ndef circular_shift(x, shift):\n    string_x = str(x)\n    length = len(string_x)\n    if shift > length:\n        return string_x[::-1]\n    else:\n        shift = shift % length\n        return string_x[-shift:] + string_x[:-shift]\n```"}
{"task_id": "HumanEval/66", "completion": "\ndef digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())\n", "raw_completion": "```python\ndef digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())\n```"}
{"task_id": "HumanEval/67", "completion": "\ndef fruit_distribution(s,n):\n    count = 0\n    for word in s.split():\n        if word.isdigit():\n            count += int(word)\n    return n - count\n", "raw_completion": "```python\ndef fruit_distribution(s,n):\n    count = 0\n    for word in s.split():\n        if word.isdigit():\n            count += int(word)\n    return n - count\n```"}
{"task_id": "HumanEval/68", "completion": "\n\ndef pluck(arr):\n    evens = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    return [] if not evens else min(evens, key=lambda x: (x[0], -x[1]))\n", "raw_completion": "```python\n\ndef pluck(arr):\n    evens = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    return [] if not evens else min(evens, key=lambda x: (x[0], -x[1]))\n```\n"}
{"task_id": "HumanEval/69", "completion": "\ndef search(lst):\n    number_frequency_dict = {}\n    for number in lst:\n        number_frequency_dict[number] = number_frequency_dict.get(number, 0) + 1\n\n    suitable_values = [key for key, value in number_frequency_dict.items() if value >= key] or [-1]\n    return max(suitable_values)\n", "raw_completion": "```python\ndef search(lst):\n    number_frequency_dict = {}\n    for number in lst:\n        number_frequency_dict[number] = number_frequency_dict.get(number, 0) + 1\n\n    suitable_values = [key for key, value in number_frequency_dict.items() if value >= key] or [-1]\n    return max(suitable_values)\n```"}
{"task_id": "HumanEval/7", "completion": "\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]\n", "raw_completion": "```python\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]\n```"}
{"task_id": "HumanEval/70", "completion": "\ndef strange_sort_list(lst):\n    lst = sorted(lst)\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result\n", "raw_completion": "```python\ndef strange_sort_list(lst):\n    lst = sorted(lst)\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result\n```"}
{"task_id": "HumanEval/71", "completion": "\ndef triangle_area(a, b, c):\n    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n", "raw_completion": "```python\ndef triangle_area(a, b, c):\n    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n```"}
{"task_id": "HumanEval/72", "completion": "\ndef will_it_fly(q,w):\n    return q == q[::-1] and sum(q) <= w\n", "raw_completion": "```python\ndef will_it_fly(q,w):\n    return q == q[::-1] and sum(q) <= w\n```"}
{"task_id": "HumanEval/73", "completion": "\ndef smallest_change(arr):\n    start, end, changes = 0, len(arr) - 1, 0\n    while start <= end:\n        if arr[start] != arr[end]:\n            changes += 1\n        start += 1\n        end -= 1\n    return changes\n", "raw_completion": "```python\ndef smallest_change(arr):\n    start, end, changes = 0, len(arr) - 1, 0\n    while start <= end:\n        if arr[start] != arr[end]:\n            changes += 1\n        start += 1\n        end -= 1\n    return changes\n```"}
{"task_id": "HumanEval/74", "completion": "\n\ndef total_match(lst1, lst2):\n    if sum(len(i) for i in lst1) <= sum(len(j) for j in lst2):\n        return lst1\n    else:\n        return lst2\n\n", "raw_completion": "```python\n\ndef total_match(lst1, lst2):\n    if sum(len(i) for i in lst1) <= sum(len(j) for j in lst2):\n        return lst1\n    else:\n        return lst2\n\n```"}
{"task_id": "HumanEval/75", "completion": "\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, a) if is_prime(i)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False\n", "raw_completion": "```python\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, a) if is_prime(i)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False\n```"}
{"task_id": "HumanEval/76", "completion": "\ndef is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    p = 0\n    while n ** p < x:\n        p += 1\n    return n ** p == x\n", "raw_completion": "```python\ndef is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    p = 0\n    while n ** p < x:\n        p += 1\n    return n ** p == x\n```"}
{"task_id": "HumanEval/77", "completion": "\n\ndef iscube(a):\n    return round(a ** (1/3)) ** 3 == a\n", "raw_completion": "```python\n\ndef iscube(a):\n    return round(a ** (1/3)) ** 3 == a\n```"}
{"task_id": "HumanEval/78", "completion": "\ndef hex_key(num):\n    primes_in_hex = ['2', '3', '5', '7', 'B', 'D']\n    return sum(el in primes_in_hex for el in num)\n", "raw_completion": "```python\ndef hex_key(num):\n    primes_in_hex = ['2', '3', '5', '7', 'B', 'D']\n    return sum(el in primes_in_hex for el in num)\n```"}
{"task_id": "HumanEval/79", "completion": "\ndef decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"\n", "raw_completion": "```python\ndef decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"\n```"}
{"task_id": "HumanEval/8", "completion": "\nfrom typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for num in numbers:\n        product_numbers *= num\n    return (sum_numbers, product_numbers if numbers else 1)\n", "raw_completion": "```python\nfrom typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for num in numbers:\n        product_numbers *= num\n    return (sum_numbers, product_numbers if numbers else 1)\n```"}
{"task_id": "HumanEval/80", "completion": "\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1]== s[i+2]:\n            return False\n    return True\n", "raw_completion": "```python\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1]== s[i+2]:\n            return False\n    return True\n```"}
{"task_id": "HumanEval/81", "completion": "\ndef numerical_letter_grade(grades):\n    letter_grades = []\n\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n\n    return letter_grades\n", "raw_completion": "```python\ndef numerical_letter_grade(grades):\n    letter_grades = []\n\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n\n    return letter_grades\n```"}
{"task_id": "HumanEval/82", "completion": "\ndef prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(len(string))\n", "raw_completion": "```python\ndef prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(len(string))\n```"}
{"task_id": "HumanEval/83", "completion": "\ndef starts_one_ends(n):\n    if n == 1:\n        return 1\n    else:\n        return 2*9**(n-1)\n", "raw_completion": "```python\ndef starts_one_ends(n):\n    if n == 1:\n        return 1\n    else:\n        return 2*9**(n-1)\n```"}
{"task_id": "HumanEval/84", "completion": "\n\ndef solve(N):\n    binary_representation = format(N, 'b')    # converting number to binary\n    sum_of_digits = sum(int(digit) for digit in binary_representation)    # sum of binary digits\n    return format(sum_of_digits, 'b')    # return sum in binary\n\n", "raw_completion": "```python\n\ndef solve(N):\n    binary_representation = format(N, 'b')    # converting number to binary\n    sum_of_digits = sum(int(digit) for digit in binary_representation)    # sum of binary digits\n    return format(sum_of_digits, 'b')    # return sum in binary\n\n```"}
{"task_id": "HumanEval/85", "completion": "\ndef add(lst):\n    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0])\n", "raw_completion": "```python\ndef add(lst):\n    return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0])\n```"}
{"task_id": "HumanEval/86", "completion": "\ndef anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))\n", "raw_completion": "```python\ndef anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))\n```"}
{"task_id": "HumanEval/87", "completion": "\ndef get_row(lst, x):\n    coordinates = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(coordinates, key=lambda k: (k[0], -k[1]))\n", "raw_completion": "```python\ndef get_row(lst, x):\n    coordinates = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(coordinates, key=lambda k: (k[0], -k[1]))\n```"}
{"task_id": "HumanEval/88", "completion": "\ndef sort_array(array):\n    if len(array) == 0 or len(array) == 1:\n        return array\n    else:\n        if (array[0] + array[-1]) % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)\n", "raw_completion": "```python\ndef sort_array(array):\n    if len(array) == 0 or len(array) == 1:\n        return array\n    else:\n        if (array[0] + array[-1]) % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)\n```"}
{"task_id": "HumanEval/89", "completion": "\ndef encrypt(s):\n    return ''.join(chr((ord(i) - 96 + 4) % 26 + 96) if 'a' <= i <= 'z' else chr((ord(i) - 64 + 4) % 26 + 64) for i in s)\n", "raw_completion": "```python\ndef encrypt(s):\n    return ''.join(chr((ord(i) - 96 + 4) % 26 + 96) if 'a' <= i <= 'z' else chr((ord(i) - 64 + 4) % 26 + 64) for i in s)\n```"}
{"task_id": "HumanEval/9", "completion": "\nfrom typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_nums = []\n    for i, num in enumerate(numbers):\n        max_nums.append(max(numbers[:i+1]))\n    return max_nums\n", "raw_completion": "```python\nfrom typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_nums = []\n    for i, num in enumerate(numbers):\n        max_nums.append(max(numbers[:i+1]))\n    return max_nums\n```"}
{"task_id": "HumanEval/90", "completion": "\ndef next_smallest(lst):\n    lst = list(set(lst))\n    if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n", "raw_completion": "```python\ndef next_smallest(lst):\n    lst = list(set(lst))\n    if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n```"}
{"task_id": "HumanEval/91", "completion": "\ndef is_bored(S):\n    count = 0\n    sentences = S.replace('?', '.').replace('!', '.').split('.')\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count\n", "raw_completion": "```python\ndef is_bored(S):\n    count = 0\n    sentences = S.replace('?', '.').replace('!', '.').split('.')\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count\n```"}
{"task_id": "HumanEval/92", "completion": "\n\ndef any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == y + x:\n            return True\n    return False\n\n", "raw_completion": "```python\n\ndef any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == y + x:\n            return True\n    return False\n\n```"}
{"task_id": "HumanEval/93", "completion": "\ndef encode(message):\n    vowels = 'aeiouAEIOU'\n    message = message.swapcase()\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            if char.isupper():\n                encoded_message += chr((ord(char) - 65 + 2) % 26 + 65)\n            else:\n                encoded_message += chr((ord(char) - 97 + 2) % 26 + 97)\n        else:\n            encoded_message += char\n    return encoded_message\n", "raw_completion": "```python\ndef encode(message):\n    vowels = 'aeiouAEIOU'\n    message = message.swapcase()\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            if char.isupper():\n                encoded_message += chr((ord(char) - 65 + 2) % 26 + 65)\n            else:\n                encoded_message += chr((ord(char) - 97 + 2) % 26 + 97)\n        else:\n            encoded_message += char\n    return encoded_message\n```"}
{"task_id": "HumanEval/94", "completion": "\ndef skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    largest_prime = max(filter(is_prime, lst))\n    \n    return sum(int(digit) for digit in str(largest_prime))\n", "raw_completion": "```python\ndef skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    largest_prime = max(filter(is_prime, lst))\n    \n    return sum(int(digit) for digit in str(largest_prime))\n```"}
{"task_id": "HumanEval/95", "completion": "\ndef check_dict_case(dict):\n    if not dict:\n        return False\n    lower_case = upper_case = True\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key != key.lower():\n            lower_case = False\n        if key != key.upper():\n            upper_case = False\n    return lower_case or upper_case\n", "raw_completion": "```python\ndef check_dict_case(dict):\n    if not dict:\n        return False\n    lower_case = upper_case = True\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key != key.lower():\n            lower_case = False\n        if key != key.upper():\n            upper_case = False\n    return lower_case or upper_case\n```"}
{"task_id": "HumanEval/96", "completion": "\ndef count_up_to(n):\n        def is_prime(n):\n            if n==1 or n==0:\n                return False\n            for i in range(2,int(n**0.5)+1):\n                if n%i==0:\n                    return False\n            return True\n        return [i for i in range(2,n) if is_prime(i)]\n", "raw_completion": "```python\ndef count_up_to(n):\n        def is_prime(n):\n            if n==1 or n==0:\n                return False\n            for i in range(2,int(n**0.5)+1):\n                if n%i==0:\n                    return False\n            return True\n        return [i for i in range(2,n) if is_prime(i)]\n```"}
{"task_id": "HumanEval/97", "completion": "\ndef multiply(a, b):\n    return (a % 10) * (b % 10)\n", "raw_completion": "```python\ndef multiply(a, b):\n    return (a % 10) * (b % 10)\n```"}
{"task_id": "HumanEval/98", "completion": "\ndef count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')\n", "raw_completion": "```python\ndef count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')\n```"}
{"task_id": "HumanEval/99", "completion": "\ndef closest_integer(value):\n    n = float(value)\n    if n >= 0:\n        return int(n) if n - int(n) < 0.5 else int(n) + 1\n    else:\n        return int(n) if abs(n - int(n)) < 0.5 else int(n) - 1\n", "raw_completion": "```python\ndef closest_integer(value):\n    n = float(value)\n    if n >= 0:\n        return int(n) if n - int(n) < 0.5 else int(n) + 1\n    else:\n        return int(n) if abs(n - int(n)) < 0.5 else int(n) - 1\n```"}
